document.write("<head>\r\n  <style>\r\n    body {\r\n    padding: 2vw;\r\n    background-color: #111;\r\n    color: white;\r\n    font-size: 1.25rem;\r\n    line-height: 1.5\r\n}\r\n\r\n#focushint {\r\n    font-size: 2rem;\r\n}\r\n\r\n.container {\r\n    display: flex;\r\n}\r\n\r\n.big-holder {\r\n    position: relative;\r\n    width: 68vw; \/* Allow it to resize based on parent\/container *\/\r\n    height: 41vw; \/* Maintain 16:10 aspect ratio *\/\r\n}\r\n\r\n#screen {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    opacity: 0.01; \/* Hide the canvas *\/\r\n}\r\n\r\n#gradientScreen {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    image-rendering: pixelated;\r\n    pointer-events: none; \/* Allow clicks to pass through *\/\r\n    background-size: 200% 200%; \/* Scale the gradient to 640x400 *\/\r\n}\r\n\r\n\/* Media query for screen width less than 700px *\/\r\n@media (max-width: 1024px) {\r\n    .big-holder {\r\n        width: 94vw; \/* 90% of viewport width *\/\r\n        height: calc(94vw * 10 \/ 16); \/* Maintain 16:10 aspect ratio *\/\r\n    }\r\n}\r\n\r\n.controls {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    margin-top: -2.5rem;\r\n    flex-wrap: wrap;\r\n    gap: 1vw;\r\n    user-select: none;\r\n}\r\n\r\n.left-controls {\r\n    display: flex;\r\n    gap: 1vw;\r\n    flex-wrap: wrap;\r\n}\r\n\r\n.arrow-controls {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 1vw;\r\n    margin-top: -1rem\r\n}\r\n\r\n.arrow-row {\r\n    display: flex;\r\n    justify-content: center;\r\n    gap: 1vw;\r\n}\r\n\r\n\r\n.controls button {\r\n    min-width: 10vw;\r\n    min-height: 10vw;\r\n    font-weight: bold;\r\n    border: none;\r\n    border-radius: 3vw;\r\n    color: #fff;\r\n    background-color: #550000; \/* DOOM-like red *\/\r\n    box-shadow: 0 0 5px #000;\r\n    transition: background-color 0.2s ease;\r\n}\r\n\r\n.controls button:hover {\r\n    background-color: #aa0000;\r\n    cursor: pointer;\r\n}\r\n\r\n.controls button:active {\r\n    background-color: #770000;\r\n}\r\n\r\n  <\/style>\r\n<\/head>\r\n<body>\r\n<h1>DooM<\/h1>\r\n    <p><\/p>\r\n    <p id=\"focushint\"><\/p>\r\n    <p>\r\n      Use <button tabindex=\"-1\" aria-label=\"enter\" role=\"presentation\">&#x23CE;<\/button> to start the game, arrow\r\n      keys <button tabindex=\"-1\" aria-label=\"left\" role=\"presentation\">&#x2190;<\/button>\r\n      <button tabindex=\"-1\" aria-label=\"up\" role=\"presentation\">&#x2191;<\/button>\r\n      <button tabindex=\"-1\" aria-label=\"down\" role=\"presentation\">&#x2193;<\/button>\r\n      <button tabindex=\"-1\" aria-label=\"right\" role=\"presentation\">&#x2192;<\/button> to move,\r\n      <button tabindex=\"-1\" aria-label=\"ctrl\" role=\"presentation\">ctrl<\/button> to shoot, spacebar\r\n      <button tabindex=\"-1\" aria-label=\"space\" role=\"presentation\">&nbsp;&nbsp;&nbsp;&nbsp;<\/button> to open gates,\r\n      <button tabindex=\"-1\" aria-label=\"alt\" role=\"presentation\">alt<\/button> and arrow keys to strafe (if your\r\n      browser does not handle these key otherwise). On mobile (and mobile only)\r\n      touch the buttons below the game.\r\n    <\/p>\r\n<p><strong>If you see grey lines across the game window, please adjust the window width <\/strong><\/p>\r\n    <div class=\"container\">\r\n      <div class=\"big-holder\">\r\n        <div id=\"gradientScreen\"><\/div>\r\n        <canvas id=\"screen\" tabindex=\"0\"\r\n          >This is where the DooM screen should render.<\/canvas\r\n        >\r\n      <\/div>\r\n      <span>&nbsp;<\/span>\r\n    <\/div>\r\n <h3>Mobile Controls<\/h3>\r\n<div class=\"controls\">\r\n    \r\n  <div class=\"left-controls\">\r\n     \r\n    <button id=\"enterButton\" aria-label=\"Enter\">&#x23CE;<\/button>\r\n    <button id=\"ctrlButton\">Ctrl<\/button>\r\n    <button id=\"spaceButton\">Space<\/button>\r\n    <button id=\"altButton\">Alt<\/button>\r\n  <\/div>\r\n\r\n  <div class=\"arrow-controls\">\r\n    <div class=\"arrow-row top\">\r\n      <span class=\"arrow-spacer\"><\/span>\r\n      <button id=\"upButton\" aria-label=\"up\">&#x2191;<\/button>\r\n      <span class=\"arrow-spacer\"><\/span>\r\n    <\/div>\r\n    <div class=\"arrow-row bottom\">\r\n      <button id=\"leftButton\" aria-label=\"left\">&#x2190;<\/button>\r\n      <button id=\"downButton\" aria-label=\"down\">&#x2193;<\/button>\r\n      <button id=\"rightButton\" aria-label=\"right\">&#x2192;<\/button>\r\n    <\/div>\r\n  <\/div>\r\n  <script>\r\n    \"use strict\"\r\nvar memory = new WebAssembly.Memory({ initial: 108 })\r\n\r\n\/*stdout and stderr goes here*\/\r\nconst output = document.getElementById(\"output\")\r\n\r\nfunction readWasmString(offset, length) {\r\n  const bytes = new Uint8Array(memory.buffer, offset, length)\r\n  return new TextDecoder(\"utf8\").decode(bytes)\r\n}\r\n\r\nfunction consoleLogString(offset, length) {\r\n  const string = readWasmString(offset, length)\r\n  console.log('\"' + string + '\"')\r\n}\r\n\r\nfunction appendOutput(style) {\r\n  return function (offset, length) {}\r\n}\r\n\r\nfunction getMilliseconds() {\r\n  return performance.now()\r\n}\r\n\r\n\/*doom is rendered here*\/\r\nconst canvas = document.getElementById(\"screen\")\r\nconst doom_screen_width = 320 * 2\r\nconst doom_screen_height = 200 * 2\r\n\r\nfunction rgbaToHex(r, g, b) {\r\n  return (\r\n    \"#\" +\r\n    [r, g, b].map((x) => Math.round(x).toString(16).padStart(2, \"0\")).join(\"\")\r\n  )\r\n}\r\n\r\nfunction averageBlockColour(data, startX, startY, width, blockSize) {\r\n  let r = 0, g = 0, b = 0;\r\n\r\n  for (let y = startY; y < startY + blockSize; y++) {\r\n    for (let x = startX; x < startX + blockSize; x++) {\r\n      const i = (y * width + x) * 4;\r\n      r += data[i];\r\n      g += data[i + 1];\r\n      b += data[i + 2];\r\n    }\r\n  }\r\n\r\n  const size = blockSize * blockSize;\r\n  return rgbaToHex(r \/ size, g \/ size, b \/ size);\r\n}\r\n\r\nfunction drawCanvas(ptr) {\r\n  const doom_screen = new Uint8ClampedArray(\r\n    memory.buffer,\r\n    ptr,\r\n    doom_screen_width * doom_screen_height * 4\r\n  )\r\n\r\n  const gradientDiv = document.getElementById(\"gradientScreen\")\r\n\r\n  const blockSize = 2 \/\/ downsample 2x2 pixels 320x200\r\n  const scaledWidth = doom_screen_width \/ blockSize\r\n  const scaledHeight = doom_screen_height \/ blockSize\r\n\r\n  const layers = []\r\n  const positions = []\r\n  const sizes = []\r\n\r\n  const vwu = 100 \/ scaledWidth\r\n  const vhu = 100 \/ scaledHeight\r\n\r\n  for (let y = 0; y < doom_screen_height; y += blockSize) {\r\n    let stops = []\r\n    let prevColor = null\r\n    let segmentStart = 0\r\n\r\n    for (let x = 0; x < doom_screen_width; x += blockSize) {\r\n      const avgColor = averageBlockColour(\r\n        doom_screen,\r\n        x,\r\n        y,\r\n        doom_screen_width,\r\n        blockSize\r\n      )\r\n\r\n      if (prevColor === null) {\r\n        prevColor = avgColor\r\n        segmentStart = x \/ blockSize\r\n      } else if (avgColor !== prevColor) {\r\n        stops.push(\r\n          `${prevColor} ${segmentStart * vwu}%, ${prevColor} ${\r\n            (x * vwu) \/ blockSize\r\n          }%`\r\n        )\r\n        segmentStart = x \/ blockSize\r\n        prevColor = avgColor\r\n      }\r\n    }\r\n    stops.push(\r\n      `${prevColor} ${segmentStart * vwu}%, ${prevColor} ${scaledWidth * vwu}%`\r\n    )\r\n\r\n    layers.push(`linear-gradient(to right, ${stops.join(\", \")})`)\r\n    positions.push(`0px ${(y * vhu * 0.99) \/ blockSize}%`)\r\n    sizes.push(`${scaledWidth * vwu}% ${vhu}%`)\r\n  }\r\n\r\n  \/\/ Apply layers as CSS background\r\n  gradientDiv.style.backgroundImage = layers.join(\", \")\r\n  gradientDiv.style.backgroundPosition = positions.join(\", \")\r\n  gradientDiv.style.backgroundSize = sizes.join(\", \")\r\n  gradientDiv.style.backgroundRepeat = \"no-repeat\"\r\n}\r\n\r\n\/*These functions will be available in WebAssembly. We also share the memory to share larger amounts of data with javascript, e.g. strings of the video output.*\/\r\nvar importObject = {\r\n  js: {\r\n    js_console_log: appendOutput(\"log\"),\r\n    js_stdout: appendOutput(\"stdout\"),\r\n    js_stderr: appendOutput(\"stderr\"),\r\n    js_milliseconds_since_start: getMilliseconds,\r\n    js_draw_screen: drawCanvas,\r\n  },\r\n  env: {\r\n    memory: memory,\r\n  },\r\n}\r\n\r\ndocument.addEventListener(\"contextmenu\", (e) => {\r\n  \r\n    e.preventDefault()\r\n\r\n})\r\n\r\nWebAssembly.instantiateStreaming(fetch(\"https:\/\/grahamthe.dev\/demos\/doom\/doom.wasm\"), importObject).then(\r\n  (obj) => {\r\n    obj.instance.exports.main();\r\n\r\n    \/*input handling*\/\r\n    let doomKeyCode = function (keyCode) {\r\n      \/\/ Doom seems to use mostly the same keycodes, except for the following (maybe I'm missing a few.)\r\n      switch (keyCode) {\r\n        case 8:\r\n          return 127 \/\/ KEY_BACKSPACE\r\n        case 17:\r\n          return 0x80 + 0x1d \/\/ KEY_RCTRL\r\n        case 18:\r\n          return 0x80 + 0x38 \/\/ KEY_RALT\r\n        case 37:\r\n          return 0xac \/\/ KEY_LEFTARROW\r\n        case 38:\r\n          return 0xad \/\/ KEY_UPARROW\r\n        case 39:\r\n          return 0xae \/\/ KEY_RIGHTARROW\r\n        case 40:\r\n          return 0xaf \/\/ KEY_DOWNARROW\r\n        default:\r\n          if (keyCode >= 65 \/*A*\/ && keyCode <= 90 \/*Z*\/) {\r\n            return keyCode + 32 \/\/ ASCII to lower case\r\n          }\r\n          if (keyCode >= 112 \/*F1*\/ && keyCode <= 123 \/*F12*\/) {\r\n            return keyCode + 75 \/\/ KEY_F1\r\n          }\r\n          return keyCode\r\n      }\r\n    }\r\n    let keyDown = function (keyCode) {\r\n      obj.instance.exports.add_browser_event(0 \/*KeyDown*\/, keyCode)\r\n    }\r\n    let keyUp = function (keyCode) {\r\n      obj.instance.exports.add_browser_event(1 \/*KeyUp*\/, keyCode)\r\n    }\r\n\r\n    \/*keyboard input*\/\r\n    canvas.addEventListener(\r\n      \"keydown\",\r\n      function (event) {\r\n        keyDown(doomKeyCode(event.keyCode))\r\n        event.preventDefault()\r\n      },\r\n      false\r\n    )\r\n    canvas.addEventListener(\r\n      \"keyup\",\r\n      function (event) {\r\n        keyUp(doomKeyCode(event.keyCode))\r\n        event.preventDefault()\r\n      },\r\n      false\r\n    )\r\n\r\n    \/*mobile touch input*\/\r\n    ;[\r\n      [\"enterButton\", 13],\r\n      [\"leftButton\", 0xac],\r\n      [\"rightButton\", 0xae],\r\n      [\"upButton\", 0xad],\r\n      [\"downButton\", 0xaf],\r\n      [\"ctrlButton\", 0x80 + 0x1d],\r\n      [\"spaceButton\", 32],\r\n      [\"altButton\", 0x80 + 0x38],\r\n    ].forEach(([elementID, keyCode]) => {\r\n      console.log(elementID + \" for \" + keyCode)\r\n      var button = document.getElementById(elementID)\r\n      \/\/button.addEventListener(\"click\", () => {keyDown(keyCode); keyUp(keyCode)} );\r\n      button.addEventListener(\"touchstart\", () => keyDown(keyCode))\r\n      button.addEventListener(\"touchend\", () => keyUp(keyCode))\r\n      button.addEventListener(\"touchcancel\", () => keyUp(keyCode))\r\n    })\r\n\r\n    \/*hint that the canvas should have focus to capute keyboard events*\/\r\n    const focushint = document.getElementById(\"focushint\")\r\n    const printFocusInHint = function (e) {\r\n      focushint.innerText =\r\n        \"Doom focused, if input stops working focus the game again\"\r\n      focushint.style.fontWeight = \"normal\"\r\n    }\r\n    canvas.addEventListener(\"focusin\", printFocusInHint, false)\r\n\r\n    canvas.addEventListener(\r\n      \"focusout\",\r\n      function (e) {\r\n        focushint.innerText =\r\n          \"Click on the Doom game to capute input and start playing.\"\r\n        focushint.style.fontWeight = \"bold\"\r\n      },\r\n      false\r\n    )\r\n\r\n    canvas.focus()\r\n    printFocusInHint()\r\n\r\n    \/*Main game loop*\/\r\n    function step(timestamp) {\r\n      obj.instance.exports.doom_loop_step()\r\n      window.requestAnimationFrame(step)\r\n    }\r\n    window.requestAnimationFrame(step)\r\n  }\r\n).catch(err => {\r\n  console.error(\"Failed to load WebAssembly:\", err);\r\n});\r\n  <\/script>\r\n<\/div>\r\n<\/body>");
